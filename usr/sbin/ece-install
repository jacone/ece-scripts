#! /usr/bin/env bash

# The goal of this script is install a complete production environment
# for web sites using on Escenic Content Engine as their CMS. The
# script is equally well suited for installing development, testing
# and staging environments, in addition to recover from backups create
# with the "ece -i <instance> backup" command.
#
# Always check for the latest version at
# http://github.com/vizrt/ece-scripts

# echo comments and suggestions > torstein@escenic.com
# echo frustrations > /dev/null

#####################################################################
# User definable variables (the defaults are fine in most
# cases). These are the most likely variables you want to change and
# they can all be set in the ece-install.conf file
#####################################################################
ece_user=escenic
ece_group=escenic

#Specify the jdbc_driver variable if you want to use something else
#than the default. For MySQL and Percona the default is
#/usr/share/java/mysql-connector-java.jar from the libmysql-java
#package. For MariaDB the driver is downloaded from
#downloads.mariadb.org.
#jdbc_driver=/usr/share/java/mysql-connector-java.jar
debug=0

# These variables govern where software is installed and data and run
# time files are written.
dir_suffix=escenic
escenic_root_dir=/opt/${dir_suffix}
escenic_conf_dir=/etc/${dir_suffix}
escenic_log_dir=/var/log/${dir_suffix}
escenic_data_dir=/var/lib/${dir_suffix}
escenic_run_dir=/var/run/${dir_suffix}
escenic_backups_dir=/var/backups/${dir_suffix}
escenic_spool_dir=/var/spool/${dir_suffix}
escenic_cache_dir=/var/cache/${dir_suffix}
escenic_crash_dir=/var/crash/${dir_suffix}
appserver_parent_dir=/opt

# country code for selecting the correct (APT) mirror.
mirror_country_suffix=no

java_package_name=""

# This variable is updated by the package build scripts.
ece_scripts_version="straight-from-github"

# Set the default database vendor. Possible values are mariadb and percona
db_vendor=mariadb

## Map with package name to version entries. The version can be empty.
declare -A fai_package_map
## Map with package name to arch entries. The arch can be empty.
declare -A fai_package_arch_map

#####################################################################

download_dir=${escenic_cache_dir}/$(basename $0)
log=${escenic_log_dir}/$(basename $0).log
conf_file=$HOME/ece-install.conf
ece_scripts_git_source=https://github.com/escenic/ece-scripts.git
maven_opts="--batch-mode"
wget_opts="--continue --inet4-only --quiet"
apt_opts='--no-install-recommends -o Dpkg::Options::=--force-confold'
curl_opts="--silent"

# hook scripts
ece_install_scripts_dir=$HOME/$(basename $0).d

# globals will be set to correct values in run-time.
appserver_host=localhost
appserver_port=8080
on_debian_or_derivative=0
on_redhat_or_derivative=0
on_debian=0
on_redhat=0
on_ubuntu=0
force_packages=0

# because the all in one profile will run database, search and app
# server profiles, all of which needs downloading and setting up the
# ECE software components.
ece_software_setup_completed=0

############################################################################
# For ECE 5.7
############################################################################
technet_download_list="
http://maven.escenic.com/com/escenic/engine-dist/5.7.71.178665/engine-dist-5.7.71.178665-bin.zip
https://maven.escenic.com/com/escenic/tools/assemblytool/2.0.7/assemblytool-2.0.7.zip
"

wf_download_list="
https://maven.escenic.com/com/escenic/widget-framework/framework-dist/3.5.1.174428/framework-dist-3.5.1.174428.zip
"
############################################################################

# sources.list used by ece-install
escenic_sources=/etc/apt/sources.list.d/escenic.list

# if set to 1, ece-install will try do as much dry running as
# possible. I.e. not actually install things, but only download and
# prepare the pre-requisites.
dry_run=0

## Bootstrapping, load files from /usr/share/escenic/ece-scripts The
## method will first try to be smart, in case the user has copied the
## ece-scripts somewhere else., e.g.: moved everything to ~/ece-scrpts
## or /opt/escenic/ece-scripts, this should also work.
function init() {
  # before doing anything else, be sure that the directory of the log
  # file exists.
  local dir=$(dirname $log)
  if [ ! -d $dir ]; then
    mkdir $(dirname $log) 2>/dev/null || {
      echo "Couldn't create $(dirname $log)"
      exit 1
    }
  fi

  # first, try to be nice
  local dir=$(dirname $0)/../share/escenic/ece-scripts

  # then check the standard location
  if [ ! -d $dir  ]; then
    dir=/usr/share/escenic/ece-scripts
  fi

  if [ -d $dir ]; then
    # load common librariees
    common_libraries="common-ece.sh common-bashing.sh common-io.sh common-os.sh"
    for el in $common_libraries; do
      source $dir/${el} || exit $?
    done

    # load ece-install modules
    for el in $dir/ece-install.d/*.sh; do
      log "Loading $(basename $0) module:" $(basename $el)
      source $el || exit $?
    done
  else
    echo "I cannot find $(basename $0)'s dependencies, exiting :-("
    exit 1
  fi

  # hooks for when the scirpt exits cleanly and when a user or someone
  # kills the process
  trap common_bashing_exit_hook EXIT
  trap common_bashing_user_cancelled_hook SIGINT SIGHUP
}

function get_content_engine_dir() {
  if [ "${fai_package_enabled-0}" -eq 1 ]; then
    find "${escenic_root_dir}"/escenic-content-engine-* -maxdepth 0 |
      tail -n 1
  else
    printf "%s\n" "${escenic_root_dir}/engine"
  fi
}

function download_escenic_components()
{
    if [ $ece_software_setup_completed -eq 1 ]; then
        return
    fi

    if [ "${fai_package_enabled-0}" -eq 1 ]; then
      install_configured_escenic_packages
      return
    fi

    print_and_log "Downloading software from technet.escenic.com ..."
    run cd $download_dir

    for el in $technet_download_list $wf_download_list; do
      if [ -e $(basename $el) ]; then
        continue
      fi

      log "Downloading $el ..."
      run wget $wget_opts \
        --http-user $technet_user \
        --http-password $technet_password \
        $el
    done

    for el in $ear_download_list ; do
      if [ -s $(basename $el) ]; then
        continue;
      fi
      local repo
      local targetname=$(basename $el)
      for repo in $fai_maven_repositories; do
        # Special handling for snapshots
          # It will try to get the maven-metadata file. If the file exist it will create the proper el and download it later. VOSA-108
        if curl -s -I $repo/$(dirname $el)/maven-metadata.xml | grep -q '^HTTP[^ ]* 200' ; then
          local metadata;
          local name=$(basename $el)
          metadata=$(curl -s $repo/$(dirname $el)/maven-metadata.xml)
          local timestamp=$(xmlstarlet <<< "$metadata" sel -t -m /metadata/versioning/snapshot/timestamp -c 'text()')
          local buildnumber=$(xmlstarlet <<< "$metadata"  sel -t -m /metadata/versioning/snapshot/buildNumber -c 'text()')
          #Now Check the the timestamp and buildnumber is not empty. If not then create the dist name with timestamp and buildnumber.
          if [[ -n $timestamp && -n $buildnumber ]]; then
          log "Found SNAPSHOT with $timestamp-$buildnumber in $el"
          el=$(dirname $el)/${name/SNAPSHOT/$timestamp-$buildnumber}
          fi
          log "Downloading $el from $repo".
        fi
        if curl -s -I $repo/$el | grep -q '^HTTP[^ ]* 200' ; then
          log "Downloading $(basename $el) from $repo/$el ..."
          run wget $wget_opts $repo/$el -O $targetname
          break
        else
          log "$(basename $el) not found using $repo/$el"
        fi
      done
    done
}

# we need to do one apt-get update to be sure the package list is
# fresh. However, we don't want to do this in a common method, since
# it *might* be that all pre-requisite packages already are present.
one_time_apt_update_done=0

# Will install the passed packages if these are not installed from
# before.
#
# parameters:
# $1 : space separated string of package names
function install_packages_if_missing() {
  log "Installing package(s) [$@] if missing ..."

  if [ $on_debian_or_derivative -eq 1 ]; then
    some_are_missing=0
    for el in $@; do
            # we don't need to grep away "No packages found matching
            # ..." since this message from dpkg is written to standard
            # error.
      if [ $(dpkg -l $el 2>/dev/null | grep ^ii | wc -l) -lt 1 ]; then
        some_are_missing=1
      fi
    done

    if [ $some_are_missing -eq 0 ]; then
      return
    elif [ $one_time_apt_update_done -eq 0 ]; then
      # Systemd may be running an update process on boot of new
      # machines. Therefore, if there's a current apt-get process,
      # don't do anything.
      pgrep apt-get &> /dev/null || {
        log "First running APT update to ensure fresh package list, " \
            "then continuing the above"
        run apt-get update
      }
      one_time_apt_update_done=1
    fi

    if [ $force_packages -eq 1 ]; then
      run apt-get install $apt_opts --assume-yes --force-yes $@
    else
      run apt-get install $apt_opts --assume-yes $@
    fi
  elif [ $on_redhat_or_derivative -eq 1 ]; then
    # since some versions of yum use --assume-yes and some use
    # --assumeyes (!), we use the short form, -y, here
    run yum install -y $@
  fi
}

function install_common_os_packages()
{
  print_and_log "Installing common OS packages ..."
  local packages="curl wget unzip bc ca-certificates xml2 zip"
  local git_package=git

  if [ $on_debian_or_derivative -eq 1 ]; then
    # Ubuntu doesn't have git (!) but only git-core.
    if [ $on_ubuntu -eq 1 ]; then
      git_package=git-core
    fi
    packages="${packages} bind9-host"
  elif [ $on_redhat_or_derivative -eq 1 ]; then
    packages="${packages} bind-utils"
  fi

  install_packages_if_missing $packages $git_package
  assert_commands_available lsb_release curl host wget git unzip html2

  # all hosts need the system-info package, hence we'll install the
  # escenic-content-engine package here if on a Debian based
  # system. If not, we'll just leave it, it'll be made available on
  # ther systems through git.
  if [ $on_debian_or_derivative -eq 1 ]; then
    if [ ${fai_offline_mode-0} -eq 0 ]; then
      curl -s http://apt.escenic.com/archive.key 2>> $log | \
        apt-key add - 1>> $log 2>> $log
      run apt-get update

      # Only add our repo if there's no other entry (from our pool or
      # not), there
      if ! grep -q apt.escenic.com /etc/apt/sources.list.d/escenic.list; then
        local package_pool=${fai_apt_vizrt_pool-stable}
        add_apt_source "deb http://apt.escenic.com ${package_pool} main non-free"
        run apt-get update
      fi
    fi

    # Allow manually installed escenic-common-scripts
    if [ ! -e /usr/share/escenic/ece-scripts/common-bashing.sh ]; then
      install_packages_if_missing escenic-common-scripts
    fi
  fi
}

# don't quote values when setting conf file values with
# set_conf_file_value. This is a hack-ish variable due to EAE's
# handling of .cfg files.
dont_quote_conf_values=0

# The function accepts the following parameters:
# $1 is the property
# $2 is the value
#
# The function will set these for the current instance's ece.conf. If
# the value already is set, it will replace it with this one.
function set_ece_instance_conf()
{
    if [ -z "$instance_name" ]; then
      instance_conf_file=$escenic_conf_dir/ece.conf
    else
      instance_conf_file=$escenic_conf_dir/ece-$instance_name.conf
    fi
    set_conf_file_value $1 $2 $instance_conf_file
}

# $1 the domain
#
# The method will ensure that the passed domain is resolvable by the
# host on which ece-install is run.
function ensure_domain_is_known_to_local_host() {
  if [ -z "$1" ]; then
    return 1
  fi

  local hostname_ip=$(ping -c 1 $HOSTNAME 2>/dev/null | \
    head -1 | \
    cut -d'(' -f2 | \
    cut -d')' -f1)
  local domain_ip=$(ping -c 1 $1 2>/dev/null | \
    head -1 | \
    cut -d'(' -f2 | \
    cut -d')' -f1)

  local keep_off_etc_hosts=${fai_keep_off_etc_hosts-0}
  if [[ $domain_ip != "127.0.0.1" && \
    $domain_ip != "127.0.1.1" && \
    $domain_ip != $hostname_ip && \
    $keep_off_etc_hosts -ne 1 ]]; then
    print_and_log "The domain name ${1} is not resolvable to this host"
    print_and_log "I will remedy this by adding it to /etc/hosts"
    cat >> /etc/hosts <<EOF

# added by $(basename $0) @ $(date)
127.0.1.1 ${1}
EOF
  fi
  if [[ $domain_ip != $localhost_ip && \
    $domain_ip != hostname_ip && \
    $keep_off_etc_hosts -eq 1 ]]; then
    print_and_log "The domain name ${1} is not resolvable to this host"
    print_and_log "but I will keep off /etc/hosts as you've requested."
  fi
}

# last, give the control back to the ECE user & group
function set_correct_permissions()
{
  log "Setting correct permissions on ECE related directories ..."

  for el in $engine_dir_list; do
    if [ ! -d $el ]; then
      continue
    fi

    if [ ${el} = ${escenic_data_dir} ]; then
      local correct_permission=$(find ${el} \
        -maxdepth 0 \
        -user ${ece_user} | \
        wc -l)
      if [ $correct_permission -gt 0 ]; then
        log "Data directory root, $el," \
            "has correct permissions, skiping sub directories."
        continue
      fi
    fi

    run chown -R ${ece_user}:${ece_group} $el
  done

  if [ -d "$tomcat_base" ]; then
    run chown -R ${ece_user}:${ece_group} $tomcat_base
  fi

  # it's important that the ECE user has access to read the
  # tomcat_home files, e.g. when creating a backup of it.
  if [ -d "$tomcat_home" ]; then
    run chgrp -R ${ece_group} $tomcat_home
    run chmod -R g+rx $tomcat_home
    if [ -h "$tomcat_home" ]; then
      local file=$(dirname $tomcat_home)/$(readlink $tomcat_home)
      run chgrp -R ${ece_group} ${file}
      run chmod -R g+rx $tomcat_home ${file}
    fi
  fi
}

function print_status_and_next_steps()
{
    local now=`date +%s`
    local started=`stat -c %Y $pid_file`
    local seconds=$(( now - started ))
    local days=$(( seconds / ( 60 * 60 * 24 ) ))
    local seconds_left=$(( seconds - ( $days * 60 * 60 * 24 ) ))
    local hours=$(( seconds_left / ( 60 * 60 ) ))
    local seconds_left=$(( seconds_left - ( $hours * 60 * 60 ) ))
    local minutes=$(( seconds_left / 60 ))
    local seconds_left=$(( seconds_left - $minutes * 60 ))

    if [ "${install_profile_number-42}" -ne "${PROFILE_RESTORE_FROM_BACKUP}" ]; then
      local message="The installation is now $(green complete)!"
    else
      local message="The restore is now $(green complete)!"
    fi
    print_and_log "${message} It took" ${days}d ${hours}h ${minutes}m ${seconds_left}s

    if [[ ${install_profile_number-42} -ne $PROFILE_RESTORE_FROM_BACKUP &&
            ${install_profile_number-42} -ne $PROFILE_CACHE_SERVER &&
            ${install_profile_number-42} -ne $PROFILE_WIDGET_FRAMEWORK ]]; then
        add_next_step "UNIX man pages: $(man -k escenic 2>/dev/null | awk '{print $1;}')"
        add_next_step "Guide books: http://docs.escenic.com/ece-6.0.html"
    fi

    print_next_step_list

    print $'\n'"Enjoy your time with Escenic Content Engine!"$'\n'
    print "-$(red Escenic)"
}

function check_for_required_downloads()
{
  if [ $ece_software_setup_completed -eq 1 ]; then
    return
  fi
  if [ "${fai_package_enabled-0}" -eq 1 ]; then
    return
  fi

  print_and_log "Asserting that required downloads succeeded ..."
  local required_escenic_packages="engine"
  # TODO: make assembly tool required if not using an EAR.
  if [ ${install_profile_number-42} -eq $PROFILE_ANALYSIS_SERVER ]; then
    required_escenic_packages="analysis-engine"
  fi

  local some_is_missing=0

  for el in $required_escenic_packages; do
    if [ $(ls $download_dir/$el*.{zip,jar} 2>/dev/null | wc -l) -lt 1 ]; then
      print_and_log "-> $el is missing"
      some_is_missing=1
    else
      # want the newest one if there are several
      local file=$(ls $download_dir/$el*.{zip,jar} 2>/dev/null | tail -1)
      unzip -t $file > /dev/null 2>&1

      if [ $? -ne 0 ]; then
        log "$file has been downloaded, but is faulty,"
        log "remove it and re-run $0"
        return 9
      fi
    fi
  done

  if [ $some_is_missing -eq 1 ]; then
    print_and_log "Add these download archives to the technet_download_list"
    print_and_log "and re-run $(basename $0)"
    exit 1
  fi
}

function set_up_user_environment()
{
  local bashrc=$(get_user_home_directory $ece_user)/.bashrc

  if [ $(grep bash_completion.d/ece ${bashrc} 2>/dev/null | \
    wc -l) -lt 1 ]; then
    cat >> ${bashrc} <<EOF
if [ -e /etc/bash_completion.d/ece ]; then
  . /etc/bash_completion.d/ece
fi
EOF
  fi

  # Having the EDITOR variable set is requirement for several
  # commmands, including running:
  #
  # 'ece -i <instance> -p <publication> -r <resource> edit'
  if [ $(grep EDITOR ${bashrc} 2>/dev/null | wc -l) -lt 1 ]; then
    echo "export EDITOR=vi" >> ${bashrc}
  fi

  if [ $(grep ECE_CONF_LOCATIONS ${bashrc} | wc -l) -eq 0 ]; then
    echo "export ECE_CONF_LOCATIONS=\"$escenic_conf_dir\"" >> ${bashrc}
    run chown ${ece_user}:${ece_group} ${bashrc}
  fi
}

function assert_correct_runtime_environment()
{
    if [ $(whoami) != "root" ]; then
        echo "You must be root when running $(basename $0)"
        exit 1
    fi

    create_pid
    started=`stat -c %Y $pid_file`
    create_lock

    if [ ! -e "$conf_file" ]; then
      print_and_log $conf_file "doesn't exist." \
        "I cannot live without it, so I'm exiting :-("
      remove_pid_and_exit_in_error
    fi
}

## checks the Technet and WF credentials.
function check_software_credentials() {
  install_packages_if_missing curl
  assert_commands_available curl

  if [ ${fai_offline_mode-0} -eq 1 ]; then
    return
  fi

  if [ ${fai_skip_password_checks-0} -eq 1 ]; then
    return
  fi

  print_and_log "Verifying that Technet credentials are OK ..."

  local url=http://maven.escenic.com
  local notok=$(
    is_unauthorized_to_access_url \
      ${technet_user} \
      ${technet_password} \
      $url
  )
  if [ $notok -eq 1 ]; then
    print_and_log "The technet_user & technet_password in $conf_file"
    print_and_log "are insufficient to access ${url} :-("
    remove_pid_and_exit_in_error
  fi

  # this method is called so early, so we don't yet know which
  # installation profile is being used. Hence, we just test for if the
  # wf_user & password has been set and are able to access the Escenic
  # Maven repository.

  # if the WF credentials are set, we check to see if they're OK
  if [ -n "${wf_user}" -a -n "${wf_password}" ]; then
    print_and_log "Verifying that Widget Framework credentials are OK ..."
    local url=http://maven.escenic.com
    local notok=$(
      is_unauthorized_to_access_url \
        ${wf_user} \
        ${wf_password} \
        $url
    )
    if [ $notok -eq 1 ]; then
      print_and_log "The wf_user & wf_password in $conf_file"
      print_and_log "are insufficient to access ${url} :-("
      remove_pid_and_exit_in_error
    fi
  elif [[ ${fai_wf_install-0} -eq 1 || ${fai_all_install-0} -eq 1 ]]; then
    print_and_log "You must have a valid wf_user & wf_password"
    print_and_log "in your ${conf_file}. If you don't have these,"
    print_and_log "please contact support@escenic.com"
    remove_pid_and_exit_in_error
  fi
}

function common_pre_install() {
    print "I'm logging to $log"

    # These variables are placed here as all the directories can be
    # overridden in ece-install.conf
    common_nursery_dir=$escenic_conf_dir/engine/common

    # Because of issue VF-3559, we also create the default family and
    # host directories (fixed in 5.4.0.x).
    engine_dir_list="
      $common_nursery_dir
      $escenic_conf_dir/engine/family/default
      $escenic_conf_dir/engine/environment
      $escenic_conf_dir/engine/host/localhost
      $escenic_conf_dir/engine/instance
      $escenic_root_dir
      $escenic_cache_dir
      $escenic_crash_dir
      $escenic_data_dir
      $escenic_data_dir/solr/data
      $escenic_log_dir
      $escenic_run_dir
      $escenic_spool_dir/import
    "
    ece_install_env=${escenic_run_dir}/$(basename $0).env
    if [ -e /etc/debian_version -a -x /usr/bin/dpkg ]; then
        on_debian_or_derivative=1
        export DEBIAN_FRONTEND=noninteractive

        # chicken and the egg problem, we need lsb_release to install
        # the packages later on, hence as soon as we know we've got a
        # Debian based platform, we install lsb-release. Also note,
        # the executable, lsb_release, is in the list of required
        # binaries in install_common_os_packages.
        #
        # Same goes for json_xs and jq which are required for parsing
        # YAML conf files.
        install_packages_if_missing "lsb-release libjson-xs-perl libyaml-perl jq"
    fi

    if [ -e /etc/redhat-release ]; then
      on_redhat_or_derivative=1

      # Chicken and egg problem: we need the lsb_release command
      # before doing anything else.
      install_packages_if_missing "redhat-lsb"
      rh_add_epel_repo
      install_packages_if_missing "jq perl-JSON-XS perl-YAML"

      if [ "$(lsb_release -i | grep -c RedHat)" -gt 0 ]; then
        export on_redhat=1
      fi
    fi

    parse_yaml_conf_file_or_source_if_sh_conf "${conf_file}"
    ensure_variable_is_set technet_user technet_password
    wget_auth="--http-user ${technet_user} --http-password ${technet_password}"
    check_software_credentials
    assert_commands_available lsb_release

    if [ $(lsb_release -i | grep Ubuntu | wc -l) -gt 0 ]; then
        on_ubuntu=1
    elif [ $(lsb_release -i | grep Debian | wc -l) -gt 0 ]; then
        on_debian=1
    fi

    # git will fail if curl doesn't have the right CA certificates
    # installed. As this happens on RedHat/CentOS 5.7, we turn it off
    # here.
    export GIT_SSL_NO_VERIFY=true

    make_dir $download_dir
    install_common_os_packages
    create_user_and_group_if_not_present $ece_user $ece_group
    set_up_user_environment

    if [ ${keep_off_wget_user_agent-0} -eq 0 ]; then
      wget_opts="${wget_opts}
        --header User-Agent:wget/$(basename $0)-${ece_scripts_version}
      "
    fi
}

# $1 is the default instance name, the calee is responsible for
# setting this.
function ask_for_instance_name()
{
    if [ $install_profile_number -eq $PROFILE_EDITORIAL_SERVER ]; then
        instance_name=${fai_editor_name-$1}
     elif [ $install_profile_number -eq $PROFILE_PRESENTATION_SERVER ]; then
        instance_name=${fai_presentation_name-$1}
     elif [ $install_profile_number -eq $PROFILE_SEARCH_SERVER ]; then
        instance_name=${fai_search_name-$1}
     elif [ $install_profile_number -eq $PROFILE_ALL_IN_ONE ]; then
         instance_name=${fai_all_name-$1}
     elif [ $install_profile_number -eq $PROFILE_ANALYSIS_SERVER ]; then
         instance_name=${fai_analysis_name-$1}
     fi

    if [ -z "$instance_name" ]; then
        instance_name=$1
    fi
    make_dir $escenic_conf_dir/engine/instance/${instance_name}
}

## Will source /etc/default/ece if it exists, if not, it will provide
## the one shipped with the escenic-content-engine-scripts package.
function source_default_ece_or_add_it_if_not_exists() {
  if [ ! -e /etc/default/ece ]; then
    print_and_log "No /etc/default/ece present, adding a default one for you."
    local file=/usr/share/doc/escenic/escenic-content-engine-scripts/examples/etc/default/ece
    if [ -r $file ]; then
      cp $file /etc/default/ece
      run source /etc/default/ece
    else
      # just adding the bare necessities, the other values are added
      # by ece-install itself if not present.
      cat > /etc/default/ece <<EOF
# added by $(basename $0) @ $(date)
engine_instance_list=""
search_instance_list=""
analysis_instance_list=""

ece_unix_group="escenic"
ece_unix_user="escenic"

ece_script=/usr/bin/ece
remove_old_log=1
EOF
    fi
  else
    run source /etc/default/ece
  fi
}

# Will update /etc/default/ece with the type instances which are
# installed on the given host. This method should work for engine,
# search and analysis instances.
function update_type_instances_to_start_up()
{
  source_default_ece_or_add_it_if_not_exists

  if [ $type = "engine" ]; then
    if [[ "$engine_instance_list" != *"${instance_name}"* ]]; then
      print_and_log "Adding $instance_name instance to the init.d configuration"
      set_conf_file_value engine_instance_list \
        "$engine_instance_list $instance_name" \
        /etc/default/ece
    fi
  elif [ $type = "search" ]; then
    if [[ "$search_instance_list" != *"${instance_name}"* ]]; then
      print_and_log "Adding $instance_name instance to the init.d configuration"
      set_conf_file_value search_instance_list \
        "$search_instance_list $instance_name" \
        /etc/default/ece
    fi
  elif [ $type = "analysis" ]; then
    if [[ "$analysis_instance_list" != *"${instance_name}"* ]]; then
      print_and_log "Adding $instance_name instance to the init.d configuration"
      set_conf_file_value analysis_instance_list \
        "$analysis_instance_list $instance_name" \
        /etc/default/ece
    fi
  fi
}

function install_presentation_server()
{
    print_and_log "Installing a presentation server on $HOSTNAME."
    type=engine
    install_ece_instance $default_ece_intance_name $PROFILE_PRESENTATION_SERVER
}

function install_editorial_server()
{
    print_and_log "Installing an editorial server on $HOSTNAME ..."
    type=engine
    install_ece_instance "${default_ece_intance_name}" 0
}

function run_hook()
{
    if [ -e $ece_install_scripts_dir -a \
        -e ${ece_install_scripts_dir}/${1} ]; then

        # Dumping all set variables (no functions) to a file from
        # which the hooks can pick them up. We do this to avoid
        # running "export" in front of all local variables which may
        # or may not be useful. Furthermore, we filter out upper case
        # variables as these are environment variables.
        set | grep ^[a-z] | grep \= > ${ece_install_env}

        print_and_log "Started hook  $1 ..."
        bash ${ece_install_scripts_dir}/${1}
        print_and_log "Finished hook $1 ..."
    fi
}

# useful for development and test environments.
function install_all_in_one_environment()
{
    print_and_log "Installing an all-in-one environment on $HOSTNAME ..."
    type=engine
    install_database_server
    install_ece_instance $default_ece_intance_name 0
    install_cache_server
    install_web_server 2
    multicore_solr_setup

    install_widget_framework
    create_publication
}

## We're adding the ece script to the run levels regardless of the
## installation profile (as long as the init.d script exists) since
## it's possible to install several profiles from the same run of
## ece-install and then it's not sure the test for a profile that
## needs the ece init.d script will succeed.
function add_ece_init_to_runlevels() {
  if [ ! -x /etc/init.d/ece ]; then
    return
  fi

  if [ $on_debian_or_derivative -eq 1 ]; then
    print_and_log "Adding the ece init.d script to the default run levels ..."
    run update-rc.d ece defaults 35
  elif [ $on_redhat_or_derivative -eq 1 ]; then
    run chkconfig --level 35 ece on
  else
    add_next_step "Remember to add /etc/init.d/ece to the desired run levels."
    # TODO add init.d to the default runlevels, for other
    # distributions too:
    # - Gentoo: rc-update add ece default
  fi
}

function common_post_install() {
  add_ece_init_to_runlevels


  if [ ${fai_system_info_skip-0} -eq 1 ]; then
      install_system_info
  fi
  set_correct_permissions

  print_status_and_next_steps
}

function un_install_everything() {
  local pretty_please="I know what I'm doing, please do as I say."
  local package_to_remove_list="
    ant
    ant-contrib
    ant-optional
    escenic-check-mk-plugins
    escenic-common-scripts
    escenic-content-engine-scripts
    escenic-munin-plugins
    libmysql-java
    maven2
    memcached
    munin
    munin-node
    munin-plugins-extra
    munin-java-extra
    nginx
    percona-server-client
    percona-server-client-5.5
    percona-server-common-5.5
    percona-server-server
    percona-server-server-5.5
    varnish
    ${java_package_name}
    mariadb-client
    mariadb-client-5.5
    mariadb-client-core-5.5
    mariadb-server
    mariadb-server-5.5
    mariadb-server-core-5.5
    mariadb-common
  "
  local file_to_remove_list="
    $escenic_conf_dir
    ${appserver_parent_dir}/*tomcat*
    $escenic_root_dir
    $escenic_data_dir
    $escenic_run_dir
    $escenic_conf_dir
    $escenic_log_dir
    $escenic_sources
  "
  local key_to_remove_list="
    C4DEFFEB
    CD2EFD2A
    1BB943DB
  "
print_and_log "You have set fai_un_install_everything=1 in your ${conf_file}"
  print_and_log "This will $(red uninstall the following on $HOSTNAME):"
  print_and_log "Packages to be removed:" $(echo $package_to_remove_list)
  print_and_log "Files & directories to be removed:" $file_to_remove_list
  print_and_log "APT keys to be removed:" $key_to_remove_list
  print "If you're absolutely sure about this, type:"
  print "$pretty_please"
  read answer

  if [[ "$answer" != "$pretty_please" ]]; then
    print_and_log "You didn't type the confirmation string correctly."
    print_and_log "You typed: [ ${answer} ]. I will not uninstall anything"
    return
  else
    print_and_log "OK, I'll do as you wish:"
    print_and_log "I will uninstall everything set up by $(basename $0)"
  fi

  for el in $file_to_remove_list; do
    fail_safe_run rm -rf $el
  done

  for el in $key_to_remove_list; do
    if [ $(apt-key list | grep $el | wc -l) -gt 0 ]; then
      fail_safe_run apt-key remove $el
    fi
  done

  for el in $remove_package_list; do
    if [ $(dpkg -l $el | grep ^ii | wc -l) -gt 0 ]; then
      fail_safe_run apt-get --yes --purge remove $el
    fi
  done

  fail_safe_run apt-get clean

  # cannot log since we've removed the log and its directory too.
  print "Everything set up by $(basename $0) should now"
  print "have been removed from ${HOSTNAME}."
}

ece_install_trail_file=${escenic_data_dir}/$(basename $0)/$(date +%s)-$(basename $0).trail
## $@ add this trail
function leave_trail() {
  local dir=$(dirname $ece_install_trail_file)
  run mkdir -p $dir
  echo "$@" >> $ece_install_trail_file
}

function read_user_input() {
  for el in "$@"; do
    if [ $el = "-v" -o $el = "--verbose" ]; then
      debug=1
    elif [ $el = "-V" -o $el = "--version" ]; then
      echo "Version:" $ece_scripts_version
      exit 0
    elif [ $el = "-f" -o $el = "--conf-file" ]; then
      next_is_conf_file=1
    elif [[ -n $next_is_conf_file && $next_is_conf_file -eq 1 ]]; then
      conf_file=$el
      case ${conf_file} in
        /*)
          ;;
        *)
          conf_file=$(pwd)/${conf_file}
          ;;
      esac

      next_is_conf_file=0
    fi
  done
}

function main() {
    read_user_input "$@"
    init
    assert_correct_runtime_environment

    print_and_log "Full Automatic Install (FAI)."
    print_and_log "All user input will be read from $conf_file"

    common_pre_install
    perform_dry_run_if_applicable

    no_fai_profile=1

    if [ ${fai_un_install_everything-0} -eq 1 ]; then
      install_profile_number=$PROFILE_UN_INSTALL
      un_install_everything
      no_fai_profile=0
    fi

    # some profiles, like DB slave might need the NFS client, hence we
    # install it pretty far up.
    if [ ${fai_nfs_client_install-0} -eq 1 ]; then
      install_profile_number=$PROFILE_NFS_CLIENT
      install_nfs_client
      no_fai_profile=0
    fi

    if [ ${fai_all_install-0} -eq 1 ]; then
        install_profile_number=$PROFILE_ALL_IN_ONE
        install_all_in_one_environment
        no_fai_profile=0
    fi

    if [ ${fai_db_install-0} -eq 1 ]; then
        install_profile_number=$PROFILE_DB_SERVER
        install_database_server
        no_fai_profile=0
    fi

    if [ ${fai_editor_install-0} -eq 1 ]; then
        install_profile_number=$PROFILE_EDITORIAL_SERVER
        install_editorial_server
        no_fai_profile=0
    fi

    if [ ${fai_search_install-0} -eq 1 ]; then
        install_profile_number=$PROFILE_SEARCH_SERVER
        install_search_server
        no_fai_profile=0
    fi

    if [ ${fai_wf_install-0} -eq 1 ]; then
        install_profile_number=$PROFILE_WIDGET_FRAMEWORK
        install_widget_framework
        no_fai_profile=0
    fi

    if [ ${fai_presentation_install-0} -eq 1 ]; then
        install_profile_number=$PROFILE_PRESENTATION_SERVER
        install_presentation_server
        no_fai_profile=0
    fi

    if [ ${fai_cache_install-0} -eq 1 ]; then
        install_profile_number=$PROFILE_CACHE_SERVER
        install_cache_server
        no_fai_profile=0
    fi

    if [ ${fai_publication_create-0} -eq 1 ]; then
        install_profile_number=$PROFILE_CREATE_PUBLICATION
        create_publication
        no_fai_profile=0
    fi

    if [ ${fai_restore_from_backup-0} -eq 1 ]; then
        install_profile_number=$PROFILE_RESTORE_FROM_BACKUP
        restore_from_backup
        no_fai_profile=0
    fi

    if [ ${fai_rmi_install-0} -eq 1 ]; then
        install_profile_number=$PROFILE_RMI_HUB
        install_rmi_hub
        no_fai_profile=0
    fi


    if [ ${fai_analysis_db_install-0} -eq 1 ]; then
      install_profile_number=$PROFILE_ANALYSIS_DB_SERVER
      install_database_server
      no_fai_profile=0
    fi

    # Important that the EAE is installed after all, editor and
    # presentation in case it's running on the same host as any of
    # them. This because it configures the EAE ECE plugin, which the
    # ECE profiles also will copy out if EAE is listed in the
    # technet_download_list.
    if [ ${fai_analysis_install-0} -eq 1 ]; then
        install_profile_number=$PROFILE_ANALYSIS_SERVER
        install_analysis_server
        no_fai_profile=0
    fi

    if [ ${fai_nfs_server_install-0} -eq 1 ]; then
      install_profile_number=$PROFILE_NFS_SERVER
      install_nfs_server
      no_fai_profile=0
    fi

    # checking for VIP profile last so that ece-install can (if so
    # configured in the ece-install.con) install all dependent
    # services first.
    if [ ${fai_vip_install-0} -eq 1 ]; then
      install_profile_number=$PROFILE_VIP_PROVIDER
      install_vip_provider
      no_fai_profile=0
    fi

    if [ ${fai_db_daily_backup-0} -eq 1 ]; then
      install_profile_number=$PROFILE_DB_BACKUP_SERVER
      install_db_backup_server
      no_fai_profile=0
    fi

    if [ ${fai_assembly_tool_install-0} -eq 1 ]; then
      set_up_assembly_tool
      no_fai_profile=0
    fi

    if [ "${fai_cue_install-0}" -eq 1 ]; then
      install_cue
      no_fai_profile=0
    fi

    if [ "${fai_sse_proxy_install-0}" -eq 1 ]; then
      install_sse_proxy
      no_fai_profile=0
    fi

    if [ $no_fai_profile -eq 1 ]; then
        print_and_log "No install profile selected, be sure to have one of the "
        print_and_log "fai_<profile>_install=1 in your $conf_file"
        remove_pid_and_exit_in_error
    fi

    common_post_install
}

main "$@"
exit 0
