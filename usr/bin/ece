#! /usr/bin/env bash

# Script for doing various operations on the Escenic Content Engine,
# the RMI hub and the indexer standalone instances. Type "ece help"
# for a complete list of supported operations.
#
# echo comments and suggestions > torstein@escenic.com

######################################################################
# Needs to be here to bootstrap the ece script itself when it looks
# for the ece[-[a-z0-9]*].conf files.
#
# There is one to avoid this bootstrap dependency, and that is to set
# the ECE_CONF_LOCATIONS environment variable, however this is quite
# uncommon and generally speaking not recommended.
######################################################################
escenic_conf_dir=/etc/escenic

######################################################################
# Script defaults, my be overriden in any of the configration files
######################################################################
force_ipv4=0
quiet=0
everything_but_the_kitchen_sink=0

######################################################################
# Dear user, don't touch anyting in this script, especially below this
# line :-)
######################################################################
ece_scripts_version="straight-from-github"
type=engine
instance=engine1
command=""
backup_exclude_binaries=0
backup_exclude_conf=0
backup_exclude_db=0
backup_exclude_init=0
backup_exclude_multimedia=0
backup_exclude_solr=0
backup_exclude_state=0
wget_appserver_auth=""
curl_appserver_auth=""
log=""

type_list="
engine
search
rmi-hub
"

hub_required_fields="
ece_server_hostname
rmi_hub_conf
rmi_hub_home
"

engine_required_fields="
appserver
assemblytool_home
cache_dir
data_dir
escenic_conf_dir
ece_home
ece_security_configuration_dir
enable_heap_dump
enable_remote_debugging
enable_remote_monitoring
java_home
solr_home
log_dir
run_dir
tmp_dir
"

search_required_fields="
appserver
java_home
solr_home
tmp_dir
"

analysis_required_fields="
appserver
java_home
tmp_dir
"

## Bootstrapping, load files from /usr/share/escenic/ece-scripts The
## method will first try to be smart, in case the user has copied the
## ece-scripts somewhere else., e.g.: moved everything to ~/ece-scrpts
## or /opt/escenic/ece-scripts, this should also work.
function init() {
  # first, try to be nice
  local dir=$(dirname $0)/../share/escenic/ece-scripts

  # then check the standard location
  if [ ! -d $dir  ]; then
    dir=/usr/share/escenic/ece-scripts
  fi

  if [ -d $dir ]; then
    # load common libraries
    common_libraries="common-bashing.sh common-io.sh common-os.sh common-ece.sh"
    for el in $common_libraries; do
      source $dir/${el}
    done

    # load ece-install modules
    for el in $dir/ece.d/*.sh; do
      source $el
    done
  else
    echo "I cannot find $(basename $0)'s dependencies, exiting :-("
    exit 1
  fi
}

####################################################################
# Ensures that all required fields are set. Will report all missing
# required fields before failing.
####################################################################
function ensure_that_required_fields_are_set() {
    requirements_failed=0

    for el in $@; do
        if [ -n "$(eval echo $`echo $el`)" ]; then
            continue
        fi

        print "You need to specifiy '$el' in one of ${ece_conf_files_read[@]}"
        requirements_failed=1
    done

    if [ "$requirements_failed" -eq 1 ]; then
        exit 1
    fi
}

ece_conf_files_read=()

function read_conf_file() {
    for el in $conf_file_location_list; do
        if [ -r $el/$1 ]; then
            debug "found $1 in $el, reading it"
            source $el/$1
            ece_conf_files_read=($el/$1 ${ece_conf_files_read})
            break
        fi
    done
}

## If the system is installed using the recommended paths, the method
## will return a list of the instances configured in
## ${escenic_conf_dir}/ece-*.conf
export root_allowed_list_instances=1
function get_instance_list() {
    local allowed_types="engine analysis changelogd search rmi-hub"
    instance_list=""
    for el in $(\ls /etc/escenic/ece-*.conf 2>/dev/null); do

      local instance=$(basename $el .conf)
      instance=${instance##ece-}

      for ele in $allowed_types; do
        if [[ $instance == $ele ]]; then
          instance=""
          continue
        fi

        local away="${ele}-"
        instance=${instance##${away}}
      done
      instance_list="$instance_list $instance"
    done

    echo $instance_list
}

function set_common_settings() {
    # This behaviour can be overridden by specifying a list of
    # locations in the environment variable ECE_CONF_LOCATIONS
    if [ -n "$ECE_CONF_LOCATIONS" ] ; then
        conf_file_location_list=$ECE_CONF_LOCATIONS
    else
        conf_file_location_list="
          `dirname $0`
          ${escenic_conf_dir}/$type/instance/$instance
          ${escenic_conf_dir}/$type/host/`echo $HOSTNAME | tr '[A-Z]' '[a-z]'`
          ${escenic_conf_dir}/$type/common
          ${escenic_conf_dir}/$type
          ${escenic_conf_dir}
          `dirname $0`/../etc
        "
    fi

    # main configuration file, may be overridden in the type and
    # instance specific ones.
    read_conf_file $(basename $0).conf

    log=$log_dir/$instance.out
    pid_file=$run_dir/$instance.pid

    gc_log=${log_dir}/${instance}-gc.log

    log4j_file_list="
      $log_dir/${HOSTNAME}-${instance}-messages
      $log_dir/${instance}-messages
      $log_dir/messages
      $log_dir/Escenic-error.log
    "

}

function set_type_settings() {
    # optional: possible to have type specific conf file,
    # will take precedences over the common one.
    read_conf_file $(basename $0)-$type.conf
}

function set_type_pid() {
    if [ "$(uname)" == "Linux" ]; then
        ps_options="auxww"
    else
        ps_options="-ef"
    fi

    # Get a hold of the PID of the process. Although we've got the PID
    # file, we stil get the PID from the OS here as we used it for
    # sanity checking later on, see stop_type().
    if [ "$type" == "rmi-hub" ]; then
        # we need to be able to differentiate between an ECE instance
        # and an rmi hub, for this we use java.security.policy which
        # the hub doesn't have.
        type_pid=`ps $ps_options | grep -v java.security.policy | \
            awk "/Djava.rmi.server.hostname=$ece_server_hostname / && \
            !/awk/"' {print $2}'`
    else
        type_pid=`ps $ps_options | awk "/Descenic.server=$ece_server / && !/awk/"' {print $2}'`
    fi

    debug "type_pid is now=$type_pid"
}

function set_type_port() {
    host=localhost
    # port set in ece[-instance].conf takes precedence
    if [ -n "${appserver_port}" ]; then
        port=${appserver_port}
        debug "appserver_port set in .conf files=${port}"
    elif [ "$appserver" != "tomcat" ]; then
        debug "Only tomcat is supported for reading host/port right now, "
        debug "trying to make an educated guess"
        port=8080
    else
        if [ -r $tomcat_base/logs/catalina.out ]; then
            # for tomcat6-user packaged tomcats (and perhaps others)
            out_log=$log_dir/${instance_name}-tomcat-catalina.out
        else
            out_log=$log
        fi

        if [ -r $out_log ]; then
            port=$(grep "INFO: Starting Coyote HTTP/1.1 on http-" \
                $out_log | \
                tail -1 | \
                cut -d'-' -f2
            )
        fi
    fi

    debug "set_type_port=$port"
}

function set_instance_settings() {
    # optional: possible to have instance specific conf files,
    # these will take precedence over the other two
    read_conf_file $(basename $0)-$instance.conf
    read_conf_file $(basename $0)-$type-$instance.conf

    # at this point in the script flow, we have now read all the
    # possible combinations of conf files (common, type and instance)
    # and can now ensure that required fields are set and apply them.
    if [ "$type" == "rmi-hub" ]; then
        ensure_that_required_fields_are_set $hub_required_fields
    elif [ "$type" == "search" ]; then
        ensure_that_required_fields_are_set $search_required_fields
    elif [ "$type" == "engine" ]; then
        ensure_that_required_fields_are_set $engine_required_fields
    elif [ "$type" == "analysis" ]; then
        ensure_that_required_fields_are_set $analysis_required_fields
    fi

    # We respect ece_server if it's set in any of the configuration
    # files. If it's not set there, it sets some sensible defaults.
    if [ -z "$ece_server" ]; then
        if [ "$instance" == "engine1" ]; then
            ece_server=${HOSTNAME}
        else
            ece_server=${HOSTNAME}-${instance}
        fi
    fi

    set_type_pid

    # if type is rmi-hub, we don't' need more configuration.
    if [ "$type" == "rmi-hub" ]; then
        return
    fi

    # Common options for all ECE installations
    #
    # * escenic.server is to identify the ECE instance, if
    #   instance is set (to something different than default, it's
    #   included in the escenic.server parameter)
    # * solr.home needed for ECE5, but doesn't hurt on an ECE4 system.
    # * java.awt.headless is to avoid potential problems with graphics
    #   handling/generation, causing 0x0 bitmaps etc.
    # * java.security for configuring the Java security framework with ECE.
    # * garbage collection log: this is paramount to keep an eye on
    #   when running in production.
    ece_args="
      -Descenic.server=$ece_server
      -Dcom.escenic.instance=$instance
      -Djava.awt.headless=true
      -Djava.security.auth.login.config=$ece_security_configuration_dir/jaas.config
      -Djava.security.policy=$ece_security_configuration_dir/java.policy
      -Dsolr.solr.home=$solr_home
      -XX:+PrintGCDetails
      -XX:+PrintGCTimeStamps
      -Xloggc:${gc_log}
    "

    if [ "$jvm_gc_settings" ]; then
      ece_args=$ece_args" "$jvm_gc_settings
    fi

    jvm_rolling_gc=${jvm_rolling_gc-1}
    if [ "$jvm_rolling_gc" == 1 ]; then
      gc_rolling_args="
	-XX:+UseGCLogFileRotation
	-XX:NumberOfGCLogFiles=${number_of_gc_log_files-5}
	-XX:GCLogFileSize=${gc_log_file_size-5m}
      "
      ece_args=$ece_args" "$gc_rolling_args
    fi

    if [ "$jvm_proxy_settings" ]; then
      ece_args=$ece_args" "$jvm_proxy_settings
    fi

    if [ "$jvm_connection_settings" ]; then
      ece_args=$ece_args" "$jvm_connection_settings
    fi

    if [ -n "$ece_environment" ]; then
        ece_args=$ece_args" -Dcom.escenic.environment=${ece_environment}"
    fi

    if [ "$ece_server_hostname" ]; then
        ece_args=$ece_args" -Djava.rmi.server.hostname=$ece_server_hostname"
    fi

    if [ "$apr_lib_dir" ]; then
        ece_args=$ece_args" -Djava.library.path=$apr_lib_dir"
    fi

    if [ "$min_heap_size" ]; then
        ece_args=$ece_args" -Xms$min_heap_size"
    fi

    if [ "$max_heap_size" ]; then
        ece_args=$ece_args" -Xmx$max_heap_size"
    fi

    if [ "$min_permgen_size" ]; then
        ece_args=$ece_args" -XX:PermSize=$min_permgen_size"
    fi

    if [ "$max_permgen_size" ]; then
        ece_args=$ece_args" -XX:MaxPermSize=$max_permgen_size"
    fi

    if [ "$jvm_encoding" ]; then
        ece_args=$ece_args" -Dsun.jnu.encoding=$jvm_encoding"
        ece_args=$ece_args" -Dfile.encoding=$jvm_encoding"
    fi

    if [ "$analysis_conf_dir" ]; then
      ece_args=$ece_args" -Dcom.escenic.eae.config=${analysis_conf_dir}"
    fi

    if [ "$enable_remote_debugging" -eq 1 ]; then
        ece_args=$ece_args" -Xdebug -Xnoagent -Djava.compiler=NONE \
                            -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$remote_debugging_port"
    fi

    if [ "$enable_remote_monitoring" -eq 1 ]; then
        ece_args=$ece_args" -Dcom.sun.management.jmxremote"
        ece_args=$ece_args" -Dcom.sun.management.jmxremote.authenticate=false"
        ece_args=$ece_args" -Dcom.sun.management.jmxremote.ssl=false"
        ece_args=$ece_args" -Dcom.sun.management.jmxremote.port=$remote_monitoring_port"
    fi

    if [ "$enable_heap_dump" -eq 1 ]; then
        ece_args=$ece_args" -XX:+HeapDumpOnOutOfMemoryError"
        ece_args=$ece_args" -XX:HeapDumpPath=$heap_dump_dir"
    fi

    if [ "$force_ipv4" -eq 1 ]; then
        ece_args=$ece_args" -Djava.net.preferIPv4Stack=true"
    fi

    if [[ -n "$escenic_admin_http_user" && -n "$escenic_admin_http_password" ]]; then
      wget_appserver_auth="
        --http-user $escenic_admin_http_user
        --http-password $escenic_admin_http_password
      "
      curl_appserver_auth="-u ${escenic_admin_http_user}:${escenic_admin_http_password}"
    fi

    if [[ -n "$builder_http_user" && -n "$builder_http_password" ]]; then
      wget_builder_auth="
        --http-user $builder_http_user
        --http-password $builder_http_password
      "
    fi

    # Resin needs some more arguments as its XML parser is not
    # compatible with ECE.
    if [[ "$appserver" == "resin" ]]; then
        ece_args="$ece_args\
           -Dorg.xml.sax.driver=org.apache.xerces.parsers.SAXParser
           -Djavax.xml.stream.XMLInputFactory=com.sun.xml.stream.ZephyrParserFactory
           -Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl
           -Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl
           -Djavax.xml.transform.TransformerFactory=org.apache.xalan.processor.TransformerFactoryImpl"
        debug "resin_home=$resin_home"

    elif [ "$appserver" == "tomcat" ]; then
        if [ -z "$tomcat_base" ]; then
            tomcat_base=$tomcat_home
        else
            export CATALINA_BASE=$tomcat_base
        fi
        debug "CATALINA_BASE=$CATALINA_BASE"
    fi

    # TODO do we need to export ECE_HOME?
    export ECE_HOME=$ece_home
    export JAVA_OPTS="$JAVA_OPTS $ece_args"
    export JAVA_HOME=$java_home

    debug ECE_HOME=$ECE_HOME
    debug JAVA_HOME=$JAVA_HOME
    debug JAVA_OPTS=$JAVA_OPTS
}

function sanity_check() {
    if [ "$(whoami)" == "root" ]; then
        local next_is_ok=0
        for subcommand in ${command}; do
            # ignore options, i.e. things starting with a hyphen.
            if [[ "${subcommand}" =~ ^-.* ]]; then
              # Allow values to options, must use this since not
              # everything is using getopt (yet)
              next_is_ok=1
              continue
            fi

            if [ ${next_is_ok-0} -eq 1 ]; then
              next_is_ok=0
              continue
            fi

            declare | grep -q -w root_allowed_${subcommand//-/_} || {
              print "Sorry, you cannot be root when running " \
                    "'${BASH_SOURCE[0]##*/} ${subcommand}'." \
                    "root can only use /etc/init.d/ece"
              exit 1
            }
        done
    fi

    if [ "$(echo $command)" == "list-instances" ]; then
      return
    fi

    verify_that_directory_and_file_are_writeable $log
    verify_that_directory_and_file_are_writeable $pid_file

    if [ -z "$command" ]; then
        print "You must specificy a command, see 'ece help'."
        exit 1
    fi

    local instance_list=$(get_instance_list)
    local instance_exists=0
    for el in $instance_list; do
      if [ $el == $instance ]; then
        instance_exists=1
        break
      fi
    done

    if [ $instance_exists -eq 0 ]; then
      print "Instance '$instance' doesn't exist on $HOSTNAME"
      exit 1
    fi

    # verifies that java_home exists and has the java executable
    if [ ! -d $java_home ]; then
        print "java_home $java_home doesn't exist"
        print "check your setting in one of: ${ece_conf_files_read[@]}"
        exit 1
    elif [ ! -x $java_home/bin/java ]; then
        print "$java_home/bin/java isn't executable for $ece_user"
        exit 1
    fi
}

# Returns the file (can be a directory) passed to the function only
# if it's the actual file/directory and not a link to it. If the
# passed file is a link, the link target is returned instead.
#
# $1 - the file (which could be a link)
function get_actual_file() {
    if [ -h ${1} ]; then
        dir=$(dirname $1)
        real_file=$(ls -l ${1} | awk '{print $11}')

        # Because of the test if the file we want to returns is
        # absolute, we go to the root before testing. We want to
        # preserve the cwd, therefore, we're doing the "cd /" in a
        # subshell.
        real_file=$(
            cd /
            if [ ! -e ${real_file} ]; then
                real_file=${dir}/${real_file}
            fi

            # this is the return value from the sub process
            echo ${real_file}
        )
    else
        real_file=${1}
    fi

    echo ${real_file}
}

function set_type_command_and_instance() {
    local next_is_type=0
    local next_is_instance=0
    local next_is_publication=0
    local next_is_resource=0
    local next_is_http_user=0
    local next_is_http_password=0
    local next_is_file=0

    for el in $@; do
        if [ "$el" == "-v" -o "$el" == "--verbose" ]; then
            debug=1
            continue
        fi

        if [ "$el" == "--full" ]; then
            everything_but_the_kitchen_sink=1
            continue
        fi

        if [ "$el" == "-f" -o $el == "--file" -o $el == "--uri" ]; then
          next_is_file=1
          continue
        fi

        if [ "$el" == "-q" -o $el == "--quiet" ]; then
            quiet=1
            continue
        fi

        if [ "$el" == "--help" ]; then
            command=help
            continue
        fi

        if [ "$next_is_file" -eq 1 ]; then
          file=$el
          next_is_file=0
          continue
        fi

        if [ "$next_is_type" -eq 1 ]; then
            type=$el
            next_is_type=0
            continue
        fi

        if [ "$next_is_http_user" -eq 1 ]; then
            http_user=$el
            next_is_http_user=0
            continue
        fi

        if [ "$next_is_http_password" -eq 1 ]; then
            http_password=$el
            next_is_http_password=0
            continue
        fi

        if [ "$next_is_instance" -eq 1 ]; then
            instance=$el
            next_is_instance=0
            continue
        fi

        if [ "$next_is_publication" -eq 1 ]; then
            publication=$el
            next_is_publication=0
            continue
        fi

        if [ "$next_is_resource" -eq 1 ]; then
            resource=$el
            next_is_resource=0
            continue
        fi

        if [ "$el" == "-t" -o "$el"  == "--type" ]; then
            next_is_type=1
            continue
        else
            next_is_type=0
        fi

        if [ "$el" == "-i" -o "$el" == "--instance" ]; then
            next_is_instance=1
            continue
        else
            next_is_instance=0
        fi

        if [ "$el" == "-p" -o "$el" == "--publication" ]; then
            next_is_publication=1
            continue
        else
            next_is_publication=0
        fi

        if [ "$el" == "-r" -o "$el" == "--publication-resource" ]; then
            next_is_resource=1
            continue
        else
            next_is_resource=0
        fi

        if [ "$el" == "-u" -o "$el" == "--user" ]; then
            next_is_http_user=1
            continue
        else
            next_is_http_user=0
        fi

        if [ "$el" == "-w" -o "$el" == "--password" ]; then
            next_is_http_password=1
            continue
        else
            next_is_http_password=0
        fi

        if [ "$el" == "--exclude-binaries" ]; then
            backup_exclude_binaries=1
            continue
        elif [ "$el" == "--exclude-solr" ]; then
            backup_exclude_solr=1
            continue
        elif [ "$el" == "--exclude-conf" ]; then
            backup_exclude_conf=1
            continue
        elif [ "$el" == "--exclude-multimedia" ]; then
            backup_exclude_multimedia=1
            continue
        elif [ "$el" == "--exclude-db" ]; then
            backup_exclude_db=1
            continue
        elif [ "$el" == "--exclude-init" ]; then
            backup_exclude_init=1
            continue
        elif [ "$el" == "--exclude-state" ]; then
            backup_exclude_state=1
            continue
        elif [ "$el" == "--version" -o "$el" == "-V" ]; then
             echo "Version:" $ece_scripts_version
             exit 0
        fi

        # the only thing left at this point, is the command
        if [ -n "${command}" ]; then
          command="$command $el"
        else
          command=${el}
        fi
    done

    # If the user didn't specify which instance to use and if there's
    # only one available instance, use that instead of asking the user
    # to provide it in sanity_check.
    if [ "$instance" == "engine1" ]; then
        debug "Trying to determine instance name"
        local instance_list=$(get_instance_list)

        if [ $(echo $instance_list | grep ' ' | wc -l) -eq 0 ]; then
            instance=$instance_list
            if [ -z "$instance" ] ; then
              instance=engine1
            fi
            debug "setting instance=$instance as there's only one"
        fi
    fi
}

function set_id() {
    id="["$(basename $0)"#${type}-${instance}]"

    debug type is $type \
        and command is $command \
        and instance is $instance
}

function get_status() {
    if [ -z "$type_pid" ]; then
        echo "DOWN"
        exit 0
    elif [ -r $pid_file ]; then

        if [ "$type_pid" != `cat $pid_file` ]; then
            echo "Is running, but was not started with $(basename $0)"
            echo "system PID $ece_id differs from the PID in $pid_file"
            exit 1
        fi
    else
        echo $pid_file "did not exist, "
        echo "the ${instance} instance of ${type} is running with PID $type_pid"
        echo "but hasn't been started properly with $(basename $0)"
        exit 1
    fi

    local now=`date +%s`
    local started=`stat -c %Y $pid_file`
    local seconds=$(( now - started ))
    local days=$(( seconds / ( 60 * 60 * 24 ) ))
    local seconds_left=$(( seconds - ( $days * 60 * 60 * 24 ) ))
    local hours=$(( seconds_left / ( 60 * 60 ) ))
    local seconds_left=$(( seconds_left - ( $hours * 60 * 60 ) ))
    local minutes=$(( seconds_left / 60 ))
    local seconds_left=$(( seconds_left - $minutes * 60 ))

    echo "UP" ${days}d ${hours}h ${minutes}m ${seconds_left}s
}

function read_rc_file_if_present() {
    local rc_file=$HOME/.ecerc
    if [ -r $rc_file ]; then
        source $rc_file
    fi
}

function get_escenic_admin_url() {
    set_type_port
    local url=http://${host}:${port}/escenic-admin
    echo ${url}
}

export root_allowed_list_publications=1
function show_all_publications() {
  set_type_port
  print "These are all the publications on ${instance}:"
  get_publication_list ${port}
}

function show_all_deployments() {
  print "These are all the deployments on ${instance}:"
  cat $(get_deployment_log)
}

## $1 :: command
## $..n :: the rest of the arguments passed to /usr/bin/ece
function lookup_and_execute_dynamic_command_if_found() {
  local command=$1
  local requested_cmd=cmd_${command//-/_}
  local actual_cmd=
  actual_cmd=$(declare -F | grep -w "${requested_cmd}" | cut -d' ' -f3)
  if [ -n "${actual_cmd}" ]; then
    shift 1
    "${actual_cmd}" "$@"
    exit 0
  fi
}

init
read_rc_file_if_present
set_type_command_and_instance "$@"
set_id
set_common_settings
set_type_settings
set_instance_settings
sanity_check

for el in $command; do
    case "$el" in
        start)
            start_type
            ;;
        status)
            print "$(get_status)"
            ;;
        stop)
            stop_type
            ;;
        restart)
            restart_type
            ;;
        info)
            get_info_for_type
            ;;
        log)
            tail_messages_log
            ;;
        list-logs)
            show_all_log_paths
            ;;
        list-publications)
            show_all_publications
            ;;
        list-deployments)
            show_all_deployments
            ;;
        outlog)
            tail_out_log
            ;;
        applog)
            tail_app_log
            ;;
        kill)
            kill_type
            ;;
        threaddump)
            make_thread_dump
            ;;
        deploy)
            deploy
            ;;
        repackage)
            repackage "${file}"
            ;;
        assemble)
            assemble
            ;;
        package)
            create_packages
            ;;
        clean)
            clean_up
            ;;
        versions)
            list_versions
            ;;
        list-instances)
            print $(get_instance_list)
            ;;
        remove-old-log-files)
            remove_old_log_files
            ;;
        update)
            update_publication_resources
            ;;
        edit)
            update_publication_resources "edit_first"
            ;;
        create)
            update_publication_resources "create_first"
            ;;
        backup)
            backup_type
            ;;
        flush)
            flush_caches
            ;;
        top)
            run_ece_top
            ;;
        help)
            print_help
            ;;
        *)
            lookup_and_execute_dynamic_command_if_found "${el}" "$@"
            print "Invalid command: '$el' :-("
            print "Try 'ece help' to get a list of all commands available."
            exit 1
    esac
done

exit 0
