#! /usr/bin/env bash

## Script which creates an overview of system information related to
## the specified ECE/EAE/Search instance, example invocation:
##
## $ system-info -i engine1 | xmllint --format - > /var/www/engine1.html
##
## Add this to /etc/cronttab if you want it to create an HTML report
## every minute:
##
## echo '* *     * * *   root    system-info -f html > /var/www/index.html' >> /etc/crontab

ece_user=""
ece_scripts_version="straight-from-github"

## possible values: html, org, confluence, yaml, json (not complete)
format=yaml
generate_output_file_per_module=0
output_dir=$(pwd)
output_file=""

current_indent_level=0
INDENT="  "
verbose=0
temporaries=1
log=$HOME/.$(basename $0).log

function init() {
  # first, try to be nice
  ece_scripts_dir=$(dirname $0)/../share/escenic/ece-scripts

  # then check the standard location
  if [ ! -d $ece_scripts_dir  ]; then
    ece_scripts_dir=/usr/share/escenic/ece-scripts
  fi

  source $ece_scripts_dir/common-ece.sh
  source $ece_scripts_dir/common-bashing.sh
  source $ece_scripts_dir/common-io.sh
}

## Runs extra system-info modules
function run_system_info_modules() {
  if [ -d $ece_scripts_dir ]; then
    # load system-info modules
    if [ ! -d $ece_scripts_dir/system-info.d ]; then
      return
    fi

    for el in $(\ls $ece_scripts_dir/system-info.d/*.sh 2>/dev/null); do
      if [ $generate_output_file_per_module -eq 1 ]; then
        source $el | tee ${output_dir}/$(basename $el).${format}
      else
        source $el
      fi
    done
  fi
}

## $1 : indent level, optional, if not set, will use the
## current_indent_level
function get_indent() {
  local result=""

  if [[ "${1}x" != "x" ]]; then
    local number_of_indents=$1
  else
    local number_of_indents=$current_indent_level
  fi

  for (( i = 0; i < $number_of_indents; i++ )); do
    result="${INDENT}$result"
  done

  echo "$result"
}

function create_header() {
  local title="Overview of $HOSTNAME"

  if [ $format == "html" ]; then
cat <<EOF

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>$title @ $(date)</title>
    <style type="text/css">
$(cat $ece_scripts_dir/vizrt.css)
    </style>
  </head>
  <body>
$(cat $ece_scripts_dir/vizrt-logo-svg.html)
EOF
  elif [ $format == "json" ]; then
    cat <<EOF
{
  "title": "$title",
  "generated-date": "$(date)",
EOF
  elif [ $format == "yaml" ]; then
    cat <<EOF
---
title: $title
EOF
    if [ $temporaries -eq 1 ] ; then
      cat <<EOF
generated-date: $(date)
EOF
    fi
    cat <<EOF
report:
EOF
  else
    print_h1_header $title
    print_p_text "Generated @ $(date)"
  fi

}

function create_footer() {
    if [ $format == "html" ]; then
      cat <<EOF

  </body>
</html>
EOF

    elif [ $format == "json" ]; then
      cat <<EOF
}
EOF
    fi
}

function wrap_in_anchor_if_applicable() {
  local result=""

  if [ $format == "html" ]; then
    for el in "$@"; do
      if [[ $el == "/"* || $el == "http://"* || $el == "mysql://"* ]]; then
        result="$result <a href=\"${el}\">$el</a>"
      else
        result="$result $el"
      fi
    done
  else
    result="$@"
  fi

  echo "$result"
}

function print_un_ordered_list_start() {
  if [ $format == "org" ]; then
    echo ""
  elif [ $format == "html" ]; then
    echo "<ul>"
  elif [ $format == "confluence" ]; then
    echo ""
  elif [ $format == "json" ]; then
    echo "    ["
  fi
}

function print_un_ordered_list_end() {
  if [ $format == "org" ]; then
    echo ""
  elif [ $format == "html" ]; then
    echo "</ul>"
  elif [ $format == "confluence" ]; then
    echo ""
  elif [ $format == "json" ]; then
    echo "    ],"
  fi
}

function print_list_item() {
  if [ $format == "org" ]; then
    echo "- $@"
  elif [ $format == "html" ]; then
    echo "<li>" \
      "$@" \
      "</li>"
  elif [ $format == "confluence" ]; then
    echo "* $@"
  elif [ $format == "json" ]; then
    echo "      \"$@\", "
  elif [ $format == "yaml" ]; then
    echo "$(get_indent) - $@"
  fi
}

function json_escape_string() {
  echo "$@" | sed 's/\"/\\"/g'
}

function print_pre_text() {
  if [ $format == "org" ]; then
    cat <<EOF
#+BEGIN_SRC sh
$@
#+END_SRC
EOF
  elif [ $format == "html" ]; then
    cat <<EOF
<pre>
$@
</pre>
EOF
  elif [ $format == "confluence" ]; then
    cat <<EOF
{code}
$@
{code}
EOF
  elif [ $format == "json" ]; then
    # JSON doesn't accept newline characters
    cat <<EOF
"$(json_escape_string $(echo $@ | sed 's/$/\\n/'))",
EOF

  elif [ $format == "yaml" ]; then
    echo "|" | sed "s/^/$(get_indent) /g"
    echo "$@" | sed "s/^/$(get_indent)  /g"
  fi
}

function make_string_into_json_label() {
  echo "$@" | tr [A-Z] [a-z] | sed -e 's/ /-/g'
}

function print_h3_header() {
  if [ $format == "org" ]; then
    echo ""
    echo "*** $@"
  elif [ $format == "html" ]; then
    echo "<h3>$@</h3>"
  elif [ $format == "confluence" ]; then
    echo "h3. $@"
  elif [ $format == "json" ]; then
    cat <<EOF
    "$(make_string_into_json_label $@)" :
EOF
  elif [ $format == "yaml" ]; then
    echo ""
    echo "$(get_indent 2)${@}:"
    current_indent_level=2
  fi
}

function print_h4_header() {
  if [ $format == "org" ]; then
    echo ""
    echo "**** $@"
  elif [ $format == "html" ]; then
    echo "<h4>$@</h4>"
  elif [ $format == "confluence" ]; then
    echo "h4. $@"
  elif [ $format == "yaml" ]; then
    echo ""
    echo "$(get_indent 3)${@}:"
    current_indent_level=3
  fi
}

function print_h2_header() {
  if [ $format == "org" ]; then
    echo ""
    echo "** $@"
  elif [ $format == "html" ]; then
    echo "<h2>$@</h2>"
  elif [ $format == "confluence" ]; then
    echo "h2. $@"
  elif [ $format == "json" ]; then
    cat <<EOF
  "$(echo $@ | tr [A-Z] [a-z] | sed 's/ /-/g')" : {
EOF
  elif [ $format == "yaml" ]; then
    echo ""
    echo "$(get_indent 1)${@}:"
    current_indent_level=2
  fi
}

function print_section_end {
  if [ $format == "json" ]; then
    echo "},"
  fi
}

 function print_h1_header() {
  if [ $format == "org" ]; then
    echo "* $@"
  elif [ $format == "html" ]; then
    echo "<h1>$@</h1>"
  elif [ $format == "confluence" ]; then
    echo "h1. $@"
  elif [ $format == "yaml" ]; then
    echo "${@}:"
    current_indent_level=0
  fi
}

function print_p_text() {
  if [ $format == "org" ]; then
    echo -e "$@"
  elif [ $format == "html" ]; then
    cat <<EOF
<p>
  $@
</p>
EOF
  elif [ $format == "confluence" ]; then
    echo -e "$@"
  elif [ $format == "json" ]; then
    echo "    \"message\": \"$text\","
  elif [ $format == "yaml" ]; then
    local LINE_WRAP=72
    local line=""
    text=""

    for el in $@; do
      local tmp_line="${line} ${el}"
      # wrap the line when it becomes too long
      if [ ${#tmp_line} -gt $LINE_WRAP ]; then
        text="${text}\n$(get_indent)${el}"
        line=""
      else
        line="${line} ${el}"
      fi
    done

    # adding the last line line here. For one liners, text will be
    # empty here, so the indent is straght on. For multi line input,
    # the text variable already contains a new line at this point.
    text="${text}\n$(get_indent)${line}"
    echo -e "$text"
  fi
}

function get_user_options() {
  # starting to add support for --long-version options
  for el in $@; do
    if [ $el = "-V" -o $el = "--version" ]; then
      echo "Version:" $ece_scripts_version
      exit 0
    fi
  done

  while getopts ":d:o:i:f:u:mvst" opt; do
    case $opt in
      v)
        verbose=1
        ;;
      s)
        temporaries=0
        ;;
      d)
        output_dir=${OPTARG}
        mkdir -p $output_dir
        ;;
      u)
        ece_user=${OPTARG}
        ;;
      f)
        format=${OPTARG}
        ;;
      o)
        output_file=${OPTARG}
        ;;
      m)
        generate_output_file_per_module=1
        ;;
      t)
        generate_import_job_overview=1
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done

}

init
get_user_options $@
create_header
run_system_info_modules
create_footer
