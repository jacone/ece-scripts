#! /usr/bin/env bash

log=$HOME/.$(basename $0).log
archive_base_dir=$HOME/.$(basename $0)

function bootstrap_thyself() {
  # first, try to be nice, then check the standard location
  local dir=$(dirname $0)/../share/escenic/ece-scripts
  if [ ! -d $dir  ]; then
    dir=/usr/share/escenic/ece-scripts
  fi

  local common_libraries="
    common-bashing.sh
    common-io.sh
  "

  for el in $common_libraries; do
    source $dir/$el 2>/dev/null || {
      echo "$(basename $0): Could not load the library $el," \
        "and I can't live without it :-(" | fmt
      exit 1
    }
  done
}

function read_user_settings() {
  local file=$HOME/.$(basename $0).conf
  if [ -r $file ]; then
    run source $file
  else
    log $(blue INFO) $file "doesn't exist, will default to Atlassian on Demand"
  fi
}

function get_header_from_jira() {
  local body=$(curl -u ${user}:${password} -s ${jira_base_url}/browse/${1})
  echo "$body" | grep '<title>' | sed -e 's/<title>//g' -e 's/<\/title>//g'
}

function get_to_revision() {
  echo ${to-COMMITTED}
}

function get_from_revision() {
  echo ${from-PREV}
}

function get_user_input() {
  local next_is_from=0
  local next_is_to=0
  local next_is_project=0
  local next_is_user=0
  local next_is_password=0
  
  for el in "$@"; do
    if [[ "$el" == "-s" || "$el" == "--from" ]]; then
      next_is_from=1
    elif [[ "$el" == "-u" || "$el" == "--user" ]]; then
      next_is_user=1
    elif [[ "$el" == "-p" || "$el" == "--password" ]]; then
      next_is_password=1
    elif [[ "$el" == "-t" || "$el" == "--to" ]]; then
      next_is_to=1
    elif [[ "$el" == "-p" || "$el" == "--project" ]]; then
      next_is_project=1
    elif [[ "$el" == "-f" || "$el" == "--full" ]]; then
      full_listing=1
    elif [ ${next_is_from-0} -eq 1 ]; then
      from=$el
      next_is_from=0
    elif [ ${next_is_user-0} -eq 1 ]; then
      user=$el
      next_is_user=0
    elif [ ${next_is_password-0} -eq 1 ]; then
      password=$el
      next_is_password=0
    elif [ ${next_is_to-0} -eq 1 ]; then
      to=$el
      next_is_to=0
    elif [ ${next_is_project-0} -eq 1 ]; then
      project_code=$el
      next_is_project=0
    fi
  done
}

function should_regenerate() {
  if [[ $(is_number $(get_from_revision)) -eq 1 && \
    $(is_number $(get_to_revision)) ]]; then
    echo 0
    return
  fi

  echo 1
}

function get_commit_information_from_vcs() {
  the_diff=$(get_archive_dir)/from-$(get_from_revision)-to-$(get_to_revision).diff

  if [[ ! -e $the_diff || $(should_regenerate) -eq 1 ]]; then
    svn diff -r $(get_from_revision):$(get_to_revision) > $the_diff
    exit_on_error "svn diff -r $(get_from_revision):$(get_to_revision)"
  fi

  if [ ${full_listing-0} -eq 1 ]; then
    cat $the_diff
  else
    echo "Full diff of all" $(egrep '^(\+|\-)' $the_diff | wc -l) \
      "changes:" $the_diff | fmt
  fi
}

## $@ :: svn revision number or tag name
function get_date_from_svn_log() {
  echo $(svn log -r "$@" | sed -n '2p' | cut -d'|' -f3)
}

function get_svn_location() {
  svn info | grep URL | cut -d':' -f2-
}

function get_info_from_jira() {
  the_report=$(get_archive_dir)/from-$(get_from_revision)-to-$(get_to_revision).report
  
  if [[ ! -e $the_report || $(should_regenerate) -eq 1 ]]; then
    echo "Changes in $(get_svn_location)" > $the_report
    echo "From: revision $(get_from_revision) @" \
      $(get_date_from_svn_log $(get_from_revision)) >> $the_report
    echo "To  : revision $(get_to_revision) @" \
      $(get_date_from_svn_log $(get_to_revision)) >> $the_report

    local commit_log=$(svn log -r $(get_from_revision):$(get_to_revision))
    echo "$commit_log" | \
      grep ${project_code}-[0-9]* | \
      sed "s#.*\(${project_code}-[0-9]*\).*#\1#g" | \
      sort | \
      uniq | while read f; do
      echo "   *" $(get_header_from_jira $f) | fmt >> $the_report
      echo "   URL: ${jira_base_url}/browse/$(basename $f)" >> $the_report
      echo "" >> $the_report
    done

    add_risk_assemsment_to_report
  fi

  echo "Report:" $the_report
}

function sanity_check() {
  if [ ! -e $(pwd)/.svn ]; then
    print "This directory, $(pwd), " \
      "does not contain a working version control checkout."
    exit 1
  fi

  # defaulting to Atlassian on demand
  jira_base_url=${jira_base_url-https://vizrtcustomers.jira.com}
  if [ -z "$svn_base_url" ]; then
    # bash default string substitution terminates with slashes, hence
    # have to set this manually here.
    svn_base_url=${jira_base_url}/svn
  fi

  conf_file=$HOME/.$(basename $0).conf
  ensure_variable_is_set \
    project_code \
    user \
    password \
    jira_base_url \
    svn_base_url

  if [[ "$(get_from_revision)" == "$(get_to_revision)" ]]; then
    print_and_log "From and to revision are the same," \
      "will no create any change log"
    exit 0
  fi
}

function get_project() {
  echo $(lowercase ${project_code})
}

function get_archive_dir() {
  local project_context=$(lowercase $(get_svn_location | \
    sed -e  "s#${svn_base_url}/##g" -e 's#[ ]*##g')
  )
  
  local dir=${archive_base_dir}/${project_context}
  make_dir $dir
  echo $dir
}

function add_risk_assemsment_to_report() {
  echo "Risk assessment score: " \
    $(wc -l $the_diff 2>/dev/null | cut -d' ' -f1) \
    >> $the_report
}

bootstrap_thyself
read_user_settings
get_user_input "$@"
sanity_check
get_commit_information_from_vcs
get_info_from_jira


