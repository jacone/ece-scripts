* Viz Media Engine - Online (VMEO)
VME-Online is a content mangement system and online publishing system for Video.

** VMEO & ECE Integration

*** Getting video into VMEO
[[./graphics/vmeo-mam-to-vmeo.svg]]

Video is normally stored on a MAM, a huge file server onto which the
users copy their videos. 

VMEO controller watches a folder on the MAM for updates and imports
new raw video files as soon as they occur. The new video file is then
transcoded into a number of pre-set formats. Once all the video
formats and variants are created, the files are uploaded to the
=vmeo-streamer=.

The VMEO controller also generates a number of pictures of the video
file at several places in the clip. These snapshots are called key
frames. 

The last thing VMEO does, is to export an XML file describing the new
video file available in the VMEO controller.

*** Getting the video (meta data) into ECE
[[./graphics/vmeo-import-to-ece.svg]]

The Escenic Content Engine downloads the exported video XML, applies a
number of transformers on it (these can be XSL, BASH, Python or Perl
files) into ECE Syndication XML and downloads the key frames from the
VMEO controller.

The ECE syndication XML files is then imported into ECE and the users
can see the video content item in the Escenic Content Studio with the
key frame pictures available as related content items on the video
article.

*** Displaying video in the web browser
[[./graphics/vmeo-browser-playing-video.svg]]

When one of these video content items is desked on the website, ECE
will render the video widget. In addition to the markup, the video
widget will render some JavaScript which will ask ECE to proxy a
request to =vmeo-controller= for the URL the video stream or file. The
URL the browser calls via JavaScript looks something like this:
=/escenic-adactus-proxy/videoId=123=

The response from the =vmeo-controller= is cached in the caching
server and returned to the JavaScript running in the browser which
will inject the URL in a player. Normally this is a Flash player like
Flowplayer or an HTML =<video/>= element.

*** Device specific videos
Different devices can display different video formats and
variants. To be able to retain a high cache-ability, we've chosen to
have the following "buckets" of devices, where all devices in one
"bucket" get the same video variant.

Also worth nothing here, is that it only makes sense to heed device
detection for variants that the VMEO can deliver. I.e., if VMEO is set
up to only deliver to variants of the each video file, being able to
detect and request 14,000 different variants of the video doesn't make
any sense. 

Currently, we're using the following "buckets"

- iPhone :: all iPhones get the same video content
- iPad :: all iPads get the same video.
- Android :: since there's so many, so different Android devices out
             there, we're currently dynamically creating one bucket
             for each new Android device
- Desktop & the rest :: If the browser is neither of the above, it
     gets the standard desktop version of the video.

** Video file handling
VMEO offers many interfaces to ingest video into the VMEO system.
After ingest the videos have the following state:
- The videos are stored in their original format.
- All available meta information is available through the UI and API.
- All transcoding to preconfigured target variants is stated.

The following ingest interfaces are used by SOLARtv:
- file ingest :: \\vmeo-controller\drop\ is watced by jboss on the controller. If it is accompanied with metainformation in the documented import format, this meta information is added to the content item in the VMEO database.
- SDI ingest (live) :: An SDI feed can be connected to the vmeo-controller in the offices of SOLARtv

The following ingest interfaces are available but not used by SOLARtv
- Mobile ingest (Viz reporter) :: Several apps on iphone and nokia are available to upload video content over slow mobile networks or faster wifi connections when available to the device. 
- Webservice ingest :: A REST webservice is available to push meta information of video content including a URI that will be ued by VMEO to fetch the video for ingestion.
- Ingest formats :: VMEO has a long list of video formats it is able to ingest.

*** Transcoding
Many Web browsers on PCs, tablets and smart phones are not capable of playing the VMEO house format. It is either to big or of the wrong binary format. This is why VMEO can be configured to transcode videos to various alternative formats and sizes to allow for a variety of devices to play them.

Transcoding typically is quite CPU intensive. For this reason it makes no sense to transcode more than the amount of processors in a box in parrallel. VMEO has a queuing mechanism to ensure that it is not overloaded. More transcoding capacty can be added by deploying more transcoding machines to the cluster.

At SOLARtv transcoding is done by vmeo-controller

/Active Target variants at SOLARtv are:/
- Flash Video Format (.flv)
- AVI Format (.avi)
- Quicktime Format (.mov)
- MP4 Format (.mp4)
- Mpg Format (.mpg)

/Other available variants in VMEO are:/
- Windows Media Video Format (.wmv)
- GP File Extension (.3gp)
- Advances Streaming Format (.asf)
- Real Media Format (.rm)
- Flash Movie Format (.swf )
- the RealVideo Format 

*** Publishing
Video files are most commonly served to clients using the HTTP
protocol. The DiRetriever webservice on the controller is available
for clients to choose the right variant. HTTP requires no special
configuration other than allowing clients to access the vmeo-delivery
server on TCP port 80

In cases where the DiRetriever decides to direct a client to a video stream it uses:
- Real Time Streaming Protocol (RTSP) :: is a network control protocol designed for use in entertainment and communications systems to control streaming media servers. The protocol is used for establishing and controlling media sessions between end points. Clients of media servers issue VCR-like commands, such as play and pause, to facilitate real-time control of playback of media files from the server. The transmission of streaming data itself is not a task of the RTSP protocol. Most RTSP servers use the Real-time Transport Protocol ([[http://en.wikipedia.org/wiki/Real-time_Transport_Protocol][RTP]]) in conjunction with Real-time Control Protocol ([[http://en.wikipedia.org/wiki/RTCP][RTCP]]) for media stream delivery, however some vendors implement proprietary transport protocols. The RTSP server from RealNetworks, for example, also features RealNetworks' proprietary Real Data Transport ([[http://en.wikipedia.org/wiki/Real_Data_Transport][RDT]]). RTSP usually needs TCP:554 to be routed between the clients and the vmeo-delivery server. This port is often opened on corporate firewalls to allow for clients to access RTSP streams.
- HTTP Live Streaming (HLS) :: is an HTTP-based media streaming communications protocol implemented by Apple Inc. as part of their QuickTime X and iPhone software systems. It works by breaking the overall stream into a sequence of small HTTP-based file downloads, each download loading one short chunk of an overall potentially unbounded transport stream. As the stream is played, the client may select from a number of different alternate streams containing the same material encoded at a variety of data rates, allowing the streaming session to adapt to the available data rate. At the start of the streaming session, it downloads an extended M3U (m3u8) playlist containing the metadata for the various sub-streams which are available. HLS uses plain HTTP and requires no special network configuration.


** Live video feeds
VMEO can handle video feeds from various sources such as SDI or IP feeds.

*** Encoding
Incoming video feeds are encoded on the fly by vmeo-controller and made available to the various streaming options on vmeo-delivery. The feeds are pushed using the <vmeostreaming protocol> over tcp-i port 234.



