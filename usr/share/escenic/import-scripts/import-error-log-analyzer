#! /usr/bin/env bash

# by torstein@escenic.com

## Will check the passed log4j for import related errors and attempt
## to provide useful information on which actions to take to remedy
## them.

## $1 :: the log4j log (often called Escenic-error.log)

function print() {
  echo "$@" | fmt | sed "s~^~${id} ~g"
}

count=0
function check_picture_file() {
  count=$(( $count + 1 ))
  id="[error-#${count}]"
  local dir=$(dirname "$1")
  local file_name=$(basename "$1")

  if [ ! -d $dir ]; then
    print "The directory $dir doesn't exist." \
      "The image $1 should reside there."
    return
  fi

  local alternative=$(find $dir -maxdepth 1 -iname "$file_name" | \grep -v "$file_name")

  # first check if the image is size=0
  if [ $(find $dir -name $file_name -maxdepth 1 -type f -size 0 | wc -l) -gt 0 ]; then
    print "The file $1 has size = 0 bytes."
    return
  fi

  if [ -n "$alternative" ]; then
    print The file $1 was missing from your import data set. \
      Perhaps you meant this one: $alternative \
      Suggested command to fix this: cp "$alternative" "$1"
  elif [ ! -e $1 ]; then
    print The file $1 was missing from your data set.
  elif [ $(has_wrong_colour_space $1) -eq 1 ]; then
    file=$(basename "$1")
    print "Image ${1} has the wrong colour space, it needs to be RGB. To" \
        "fix it, you can do the following to fix it:"
    echo "   \$" cd $(dirname "$1") \&\& convert "$file" -colorspace rgb "$file"
  else
      print The XML refered to ${1} which exists. This probably means that \
        "the file wasn't there before when the import failed, but is now " \
        "there, in which case you can just re-run the import. Another option" \
        "is that the file is corrupt."
  fi

  print "Because of this error, the following file(s) (probably) failed " \
    "to import:" 
  print $(get_import_files_affected $1)
}

function get_import_files_affected() {
  local last_dir=$(basename $(dirname $1))
  for dir in $(find /var/spool/escenic/import -type d -name error); do
    find $dir -type f -name "*.xml" | \
      xargs grep $last_dir/$(basename $1) | \
      cut -d':' -f1 | \
      sort | \
      uniq
  done
}

function list_sax_errors() {
  local xml_parse_errors="$(grep ^'Caused by: org.xml.sax.SAXParseException:' $1 | sort | uniq)"
  if [ -n "$xml_parse_errors" ]; then
    echo "There are illegal elements, attributes and/or contents in the XML:"
    echo "$xml_parse_errors" | while read line; do
      count=$(( $count + 1 ))
      local id="[SAX error-#${count}]"
      echo "$id $line"
    done
  fi
}

function analyse_this() {
  if [ ! -e $1 ]; then
    echo $1 "doesn't exist :-("
    exit 1
  fi

  grep "Invalid image file" $1 | \
    grep ^java.io.IOException | \
    cut -d' ' -f5 | \
    sed 's/\.$//g' | \
    sort | \
    uniq | \
    while read picture_path; do
    check_picture_file "$picture_path"
  done

  list_sax_errors "$1"
}

function verify_log_file() {
  if [ -z "$log_file" ]; then
    echo "Usage: $(basename $0): <log file>"
    exit 1
  elif [ ! -e "$log_file" ]; then
    echo "$log_file doesn't exist :-("
    exit 1
  elif [ ! -r "$log_file" ]; then
    echo "$log_file isn't readable :-("
    exit 1
  fi
}

function has_wrong_colour_space() {
  identify -verbose "$1" 2>/dev/null | \
    grep Colorspace | \
    grep CMYK | wc -l
}

log_file=$1
verify_log_file
analyse_this $log_file
